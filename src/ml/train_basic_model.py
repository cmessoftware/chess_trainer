"""
üéØ Script de Entrenamiento B√°sico con MLflow
Entrena un modelo de clasificaci√≥n de errores usando MLflow tracking
"""

import sys
import pandas as pd
import numpy as np
from pathlib import Path
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import mlflow
import mlflow.sklearn
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def setup_mlflow():
    """Configurar MLflow tracking"""
    try:
        # Configurar URI (ajustar seg√∫n tu configuraci√≥n)
        mlflow.set_tracking_uri("http://localhost:5000")
        mlflow.set_experiment("chess_error_prediction")
        logger.info("‚úÖ MLflow configurado correctamente")
        return True
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è MLflow no disponible, continuando sin tracking: {e}")
        return False

def load_and_prepare_data(dataset_path):
    """Cargar y preparar datos para entrenamiento"""
    
    logger.info(f"üìä Cargando dataset: {dataset_path}")
    
    # Cargar datos
    df = pd.read_parquet(dataset_path)
    logger.info(f"üìè Dataset shape: {df.shape}")
    
    # Verificar columnas requeridas
    if 'error_label' not in df.columns:
        raise ValueError("Dataset debe tener columna 'error_label'")
    
    # Preparar features
    exclude_cols = ['error_label', 'pgn', 'game_id', 'move_san', 'fen', 'uci']
    feature_cols = [col for col in df.columns if col not in exclude_cols]
    
    logger.info(f"üîß Features disponibles: {len(feature_cols)}")
    
    # Identificar features t√°cticas
    tactical_features = [col for col in feature_cols 
                        if any(term in col.lower() for term in 
                              ['depth_score', 'threatens_mate', 'forced_move', 'tactical'])]
    
    if tactical_features:
        logger.info(f"‚öîÔ∏è Features t√°cticas encontradas: {len(tactical_features)}")
    
    # Preparar datos
    X = df[feature_cols].copy()
    y = df['error_label'].copy()
    
    # Manejo de valores faltantes
    logger.info(f"‚ùì Missing values antes: {X.isnull().sum().sum()}")
    
    # Rellenar NaN de manera inteligente
    for col in X.columns:
        if X[col].dtype in ['float64', 'int64']:
            # Para columnas num√©ricas, usar 0 o mediana seg√∫n el caso
            if 'score' in col.lower() or 'diff' in col.lower():
                X[col] = X[col].fillna(0)  # Diferencias neutras
            else:
                X[col] = X[col].fillna(X[col].median())  # Mediana para otras
        else:
            # Para columnas categ√≥ricas
            X[col] = X[col].fillna(False)
    
    logger.info(f"‚úÖ Missing values despu√©s: {X.isnull().sum().sum()}")
    
    # Informaci√≥n del target
    target_dist = y.value_counts()
    logger.info("üéØ Distribuci√≥n del target:")
    for label, count in target_dist.items():
        logger.info(f"   {label}: {count} ({count/len(y)*100:.1f}%)")
    
    return X, y, feature_cols, tactical_features

def train_basic_model(X, y, feature_cols, mlflow_enabled=True):
    """Entrenar modelo b√°sico con tracking MLflow"""
    
    # Split datos
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    logger.info(f"üìä Train samples: {len(X_train)}, Test samples: {len(X_test)}")
    
    # Configurar modelo
    model = RandomForestClassifier(
        n_estimators=100,
        max_depth=10,
        random_state=42,
        n_jobs=-1
    )
    
    if mlflow_enabled:
        # MLflow tracking
        with mlflow.start_run(run_name="basic_chess_classifier"):
            
            # Log par√°metros del dataset
            mlflow.log_param("n_samples", len(X))
            mlflow.log_param("n_features", len(feature_cols))
            mlflow.log_param("target_classes", y.nunique())
            mlflow.log_param("train_samples", len(X_train))
            mlflow.log_param("test_samples", len(X_test))
            
            # Log par√°metros del modelo
            mlflow.log_params(model.get_params())
            
            # Entrenar
            logger.info("üîÑ Entrenando modelo...")
            model.fit(X_train, y_train)
            
            # Predicciones
            y_pred = model.predict(X_test)
            y_pred_proba = model.predict_proba(X_test)
            
            # M√©tricas
            accuracy = accuracy_score(y_test, y_pred)
            
            # Log m√©tricas principales
            mlflow.log_metric("accuracy", accuracy)
            mlflow.log_metric("n_classes", len(np.unique(y)))
            
            # Reporte de clasificaci√≥n detallado
            report = classification_report(y_test, y_pred, output_dict=True)
            for label, metrics in report.items():
                if isinstance(metrics, dict):
                    for metric, value in metrics.items():
                        mlflow.log_metric(f"{label}_{metric}", value)
            
            # Feature importance
            feature_importance = dict(zip(feature_cols, model.feature_importances_))
            top_features = sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)[:10]
            
            for i, (feature, importance) in enumerate(top_features):
                mlflow.log_metric(f"top_feature_{i+1}_importance", importance)
                mlflow.log_param(f"top_feature_{i+1}_name", feature)
            
            # Log modelo
            mlflow.sklearn.log_model(
                model, 
                "chess_error_classifier",
                registered_model_name="ChessErrorClassifier"
            )
            
            # Log artefactos adicionales
            
            # Matriz de confusi√≥n
            cm = confusion_matrix(y_test, y_pred)
            cm_df = pd.DataFrame(cm, 
                               index=[f"True_{label}" for label in model.classes_],
                               columns=[f"Pred_{label}" for label in model.classes_])
            
            # Guardar como CSV temporal
            cm_path = "confusion_matrix.csv"
            cm_df.to_csv(cm_path)
            mlflow.log_artifact(cm_path)
            
            logger.info(f"‚úÖ Modelo entrenado - Accuracy: {accuracy:.4f}")
            
    else:
        # Entrenar sin MLflow
        logger.info("üîÑ Entrenando modelo (sin MLflow tracking)...")
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        logger.info(f"‚úÖ Modelo entrenado - Accuracy: {accuracy:.4f}")
    
    # Reporte detallado
    print("\nüìä REPORTE DETALLADO")
    print("=" * 50)
    print(f"üéØ Accuracy: {accuracy:.4f}")
    print("\nüìà Reporte por clase:")
    print(classification_report(y_test, y_pred))
    
    # Top features
    feature_importance = dict(zip(feature_cols, model.feature_importances_))
    top_features = sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)[:10]
    
    print("\nüîß Top 10 Features m√°s importantes:")
    for i, (feature, importance) in enumerate(top_features, 1):
        print(f"   {i:2}. {feature}: {importance:.4f}")
    
    return model, accuracy, y_test, y_pred

def main():
    """Funci√≥n principal"""
    
    print("üöÄ ENTRENAMIENTO B√ÅSICO CON MLFLOW")
    print("=" * 50)
    
    # Configurar MLflow
    mlflow_enabled = setup_mlflow()
    
    # Buscar dataset
    dataset_paths = [
        Path("data/export/unified_all_sources.parquet"),
        Path("data/export/unified_small_sources.parquet"),
    ]
    
    dataset_path = None
    for path in dataset_paths:
        if path.exists():
            dataset_path = path
            break
    
    if not dataset_path:
        logger.error("‚ùå No se encontr√≥ dataset. Ejecuta primero el pipeline de datos.")
        return
    
    try:
        # Cargar y preparar datos
        X, y, feature_cols, tactical_features = load_and_prepare_data(dataset_path)
        
        # Entrenar modelo
        model, accuracy, y_test, y_pred = train_basic_model(
            X, y, feature_cols, mlflow_enabled
        )
        
        # Recomendaciones
        print("\nüéØ PR√ìXIMOS PASOS RECOMENDADOS")
        print("=" * 50)
        print("1. üåê Revisar resultados en MLflow UI: http://localhost:5000")
        print("2. üìà Ejecutar comparaci√≥n por fuentes: python src/ml/compare_sources.py")
        print("3. ‚öôÔ∏è Optimizar hiperpar√°metros: python src/ml/hyperparameter_tuning.py")
        
        if tactical_features:
            print("4. ‚öîÔ∏è Experimento t√°ctico: python src/ml/tactical_experiment.py")
        
        print("5. üîÆ Hacer predicciones: python src/ml/make_predictions.py")
        
    except Exception as e:
        logger.error(f"‚ùå Error durante el entrenamiento: {e}")
        raise

if __name__ == "__main__":
    main()
