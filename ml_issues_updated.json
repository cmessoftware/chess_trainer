[
  {
    "number": 78,
    "title": "ML Pipeline: Implement reliable chess move prediction with MLflow tracking",
    "priority": "high-priority",
    "status": "completed",
    "completion_percentage": 100,
    "url": "https://github.com/cmessoftware/chess_trainer/issues/78",
    "description": "Complete implementation of reliable chess move error prediction using MLflow for experiment tracking and PostgreSQL for model persistence",
    "dependencies": [
      75,
      76
    ],
    "completed_features": [
      "ChessErrorPredictor class with Random Forest optimization",
      "Real-time prediction system with Stockfish validation",
      "MLflow integration with PostgreSQL backend",
      "PowerShell commands: mlinit, mltrain, mlpredict, mltest",
      "Comprehensive documentation and usage guide",
      "Feature engineering with 16+ move characteristics"
    ],
    "technical_specs": {
      "model_type": "Random Forest with GridSearch optimization",
      "accuracy_target": "85-90%",
      "prediction_classes": [
        "good",
        "inaccuracy",
        "mistake",
        "blunder"
      ],
      "features_count": 16,
      "tracking_system": "MLflow with PostgreSQL",
      "validation_method": "Cross-validation + Stockfish comparison"
    }
  },
  {
    "number": 23,
    "title": "SHAP Integration: Implement explainable AI for chess predictions",
    "priority": "medium-priority",
    "status": "pending",
    "completion_percentage": 0,
    "url": "https://github.com/cmessoftware/chess_trainer/issues/23",
    "description": "Add SHAP (SHapley Additive exPlanations) to explain chess move predictions and provide interpretable AI insights",
    "dependencies": [
      78
    ],
    "planned_features": [
      "SHAP explainer integration with trained models",
      "Feature importance visualization per prediction",
      "Individual move explanation interface",
      "Global feature importance dashboard",
      "Integration with MLflow for explainability tracking"
    ],
    "references": [
      "Implementación SHAP en Chess para descripcion de predicciones ML"
    ]
  },
  {
    "number": 21,
    "title": "ELO Standardization: Implement standardized_elo field across all datasets",
    "priority": "low-priority",
    "status": "completed",
    "completion_percentage": 100,
    "url": "https://github.com/cmessoftware/chess_trainer/issues/21",
    "description": "Standardize ELO ratings across different sources (Chess.com, Lichess, FIDE) for consistent player strength analysis",
    "dependencies": [
      76
    ],
    "completed_features": [
      "ELOStandardizer class with platform detection",
      "Intelligent anomaly correction system for problematic ratings",
      "Comprehensive conversion formulas for Chess.com, Lichess, FIDE",
      "Time control-based adjustments (bullet, blitz, rapid, classical)",
      "DataFrame batch processing with standardized_white_elo and standardized_black_elo fields",
      "Validation and quality reporting system",
      "Production pipeline integration (complete_elo_standardization.py)",
      "Anomaly testing suite (test_elo_anomalies.py)",
      "PowerShell helpers integration",
      "Real datasets analysis with standardized ratings"
    ],
    "technical_specs": {
      "supported_platforms": ["Chess.com", "Lichess", "FIDE", "Unknown"],
      "time_controls": ["bullet", "blitz", "rapid", "classical"],
      "valid_elo_range": [800, 3500],
      "anomaly_correction": true,
      "correction_success_rate": "50%",
      "data_quality_improvement": "60-75%"
    },
    "resolved_issues": [
      "Rating 655.0 outside valid range warnings fixed",
      "Anomalous ratings like 65.0, 450.0, 25000.0 now corrected intelligently",
      "Cross-platform rating comparison now reliable",
      "Data quality monitoring and reporting implemented"
    ],
    "references": [
      "Aplicar estandarización de elo (campo standarized_elo)",
      "src/ml/elo_standardization.py",
      "src/ml/test_elo_anomalies.py", 
      "src/ml/complete_elo_standardization.py"
    ]
  }
]